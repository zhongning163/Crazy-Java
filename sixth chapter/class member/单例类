单例类：该类始终只能创建一个实例
为了避免其他类自由创建该类的实例，应该把该类的构造器用private修饰，从而把该类的所有构造器隐藏起来
根据良好封装的原则：一旦把该类的构造器隐藏起来，就需要提供一个public作为该类的访问点，
用于创建该类的对象，且该方法必须使用static修饰（因为调用该方法前还不存在对象，因此调用该方法的不可能是对象，只能是类）

该类必须缓存已经创建的对象->使用一个成员变量来保存曾经创建的对象，该成员变量必须使用static修饰

class Singleton
{
	//使用一个类变量来缓存曾经创建的实例
	private static Singleton instance;
	//对构造器使用private修饰，隐藏该构造器
	private Singleton(){}
	//提供一个静态方法，用于返回Singleton实例
	//该方法可以加入自定义控制，保证只产生一个Singleton对象
	public static Singleton getInstance()
	{
		//如果instance为null，则表明还不曾创建Singleton对象
		//如果不为null，则表明已经创建了Singleton对象，将不会重新创建新的实例
		if (instance==null)
		{
			//创建一个Singleton对象，并将其缓存起来
			instance=new Singleton();
		}
		return instance;
	}
}
public class SingletonTest 
{
	public static void main(String[] args) 
	{
		//创建Singleton对象不能通过构造器
		//只能通过getInstance方法来得到实例
		Singleton s1=Singleton.getInstance();
		Singleton s2=Singleton.getInstance();
		System.out.println(s1==s2);
	}
}

